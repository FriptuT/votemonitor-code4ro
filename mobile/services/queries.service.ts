import { useMutation, useQuery } from "@tanstack/react-query";
import {
  ElectionRoundsAPIResponse,
  PollingStationInformationAPIPayload,
  PollingStationNomenclatorNodeAPIResponse,
  getElectionRounds,
  getPollingStationInformation,
  getPollingStationInformationForm,
  getPollingStationNomenclator,
  getPollingStationsVisits,
  upsertPollingStationGeneralInformation,
} from "./definitions.api";
import * as DB from "../database/DAO/PollingStationsNomenclatorDAO";
import { performanceLog } from "../helpers/misc";
import {
  ElectionRoundVM,
  transformElectionRoundsApiToVM,
} from "../common/models/election-round.model";

import { PollingStationNomenclatorNodeVM } from "../common/models/polling-station.model";

export const useElectionRoundsQuery = () => {
  return useQuery<ElectionRoundsAPIResponse>({
    queryKey: ["election-rounds"],
    queryFn: async () => {
      const apiData = await getElectionRounds();
      return apiData;
    },
    gcTime: Infinity,
    staleTime: Infinity,
  });
};

export const usePollingStationsNomenclatorQuery = (electionRoundId: string) => {
  return useQuery({
    queryKey: ["polling-stations-nomenclator", electionRoundId],
    queryFn: async () => {
      // TODO: Need to save and check if the CacheKey is the same (bust cache)

      const count = await performanceLog(
        () => DB.getPollingStationNomenclatorNodesCount(electionRoundId),
        "DB.getPollingStationNomenclatorNodesCount"
      );

      if (count > 0) {
        return "RETRIEVED FROM DB";
      } else {
        const data = await getPollingStationNomenclator(electionRoundId);
        await DB.addPollingStationsNomenclatureBulk(
          electionRoundId,
          data.nodes
        );
        return "ADDED TO DB";
      }
    },
    enabled: !!electionRoundId,
  });
};

export const usePollingStationsVisits = (electionRoundId: string) => {
  return useQuery({
    queryKey: ["polling-stations-visits", electionRoundId],
    queryFn: async () => {
      return getPollingStationsVisits(electionRoundId);
    },
    enabled: !!electionRoundId,
    gcTime: Infinity,
    staleTime: Infinity,
  });
};

export const usePollingStationByParentID = (parentId: number = -1) => {
  // We save the top-level parents with "parentId = -1" in DB
  return useQuery<PollingStationNomenclatorNodeVM[]>({
    queryKey: ["polling-stations-parent", parentId],
    queryFn: async () => {
      const data = await DB.getPollingStationsByParentId(parentId);
      const mapped: PollingStationNomenclatorNodeVM[] = data?.map((item) => ({
        id: item._id,
        name: item.name,
        number: item.pollingStationNumber,
        parentId: item.parentId,
        pollingStationId: item.pollingStationId,
      }));
      return mapped;
    },
    enabled: !!parentId,
  });
};

export const usePollingStationById = (pollingStationId: number) => {
  /**
   *
   *  Caution, there are 2 IDs:
   *        ------------------ 1st: Generated by Watermelon available as "id" as STRING
   *        ------------------ 2nd: Added by us, received from backend as "_id" as NUMBER ----- WE PASS THIS ONE
   */
  return useQuery({
    queryKey: ["polling-station", pollingStationId],
    queryFn: async () => {
      return DB.getPollingStationById(pollingStationId);
    },
    enabled: !!pollingStationId,
  });
};

export const upsertPollingStationGeneralInformationMutation = () => {
  return useMutation({
    mutationKey: ["upsertPollingStationGeneralInformationMutation"],
    mutationFn: async (payload: PollingStationInformationAPIPayload) => {
      return upsertPollingStationGeneralInformation(payload);
    },
    gcTime: Infinity,
  });
};

export const usePollingStationInformationForm = (electionRoundId: string) => {
  return useQuery({
    queryKey: ["polling-station-information-form", electionRoundId],
    queryFn: async () => {
      const data = await getPollingStationInformationForm(electionRoundId);
      return data;
    },
    enabled: !!electionRoundId,
  });
};

export const usePollingStationInformation = (
  electionRoundId: string,
  pollingStationIds?: string[]
) => {
  return useQuery({
    queryKey: [
      "polling-station-information",
      electionRoundId,
      pollingStationIds,
    ],
    queryFn: async () => {
      const data = await getPollingStationInformation(
        electionRoundId,
        pollingStationIds
      );
      console.log("usePollingStationInformation", data);
      return data;
    },
    enabled: !!electionRoundId,
  });
};

export const useCustomQueryToSaveData = () => {
  return useQuery({
    queryKey: ["test-data", 1],
    queryFn: async () => {
      return [
        {
          dragos: "strat",
        },
      ];
    },
    gcTime: 1,
    staleTime: 1,
  });
};
